name: Report Generation Workflow

on:
  push:
    branches:
      - main

jobs:
  run-ui-tests:
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.test.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make UI test script executable
        run: chmod +x ./uitest.sh
      
      - name: Run UI Tests
        id: test
        run: |
          # Run tests and capture output
          TEST_OUTPUT=$(./uitest.sh)
          # Save test results file
          cat ui_test_results.txt > ui_test_details.txt
          # Set output for next job
          echo "results=$TEST_OUTPUT" >> $GITHUB_OUTPUT
        continue-on-error: true

  run-unit-tests:
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.test.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make unit test script executable
        run: chmod +x ./unittest.sh
      
      - name: Run Unit Tests
        id: test
        run: |
          # Run tests and capture output
          TEST_OUTPUT=$(./unittest.sh)
          # Save test results file
          cat unit_test_results.txt > unit_test_details.txt
          # Set output for next job
          echo "results=$TEST_OUTPUT" >> $GITHUB_OUTPUT
        continue-on-error: true

  generate-reports:
    needs: [run-ui-tests, run-unit-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Make report script executable
        run: chmod +x ./report-gen.sh

      - name: Generate UI Test Report
        run: |
          mkdir -p reports
          # Parse the test results
          IFS=';' read -r -a UI_RESULTS <<< "${{ needs.run-ui-tests.outputs.test_results }}"
          for result in "${UI_RESULTS[@]}"; do
            IFS='=' read -r key value <<< "$result"
            case "$key" in
              "TOTAL") TOTAL="$value" ;;
              "PASS") PASS="$value" ;;
              "FAIL") FAIL="$value" ;;
              "RATE") RATE="$value" ;;
            esac
          done
          # Generate UI test report
          ./report-gen.sh "$TOTAL" "$PASS" "$FAIL" "$RATE" "ui"

      - name: Generate Unit Test Report
        run: |
          mkdir -p reports
          # Parse the test results
          IFS=';' read -r -a UNIT_RESULTS <<< "${{ needs.run-unit-tests.outputs.test_results }}"
          for result in "${UNIT_RESULTS[@]}"; do
            IFS='=' read -r key value <<< "$result"
            case "$key" in
              "TOTAL") TOTAL="$value" ;;
              "PASS") PASS="$value" ;;
              "FAIL") FAIL="$value" ;;
              "RATE") RATE="$value" ;;
            esac
          done
          # Generate unit test report
          ./report-gen.sh "$TOTAL" "$PASS" "$FAIL" "$RATE" "unit"

      - name: Upload Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            reports/report-ui-tests.html
            reports/report-unit-tests.html
            ui_test_details.txt
            unit_test_details.txt
