name: Report Generation Workflow

on:
  push:
    branches:
      - main

jobs:
  random-check:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.random.outputs.status }}
    steps:
      - name: Generate random status
        id: random
        run: |
          exit 1
          # # Randomly generate 0 or 1
          # RANDOM_NUM=$(( $RANDOM % 2 ))
          # if [ $RANDOM_NUM -eq 0 ]; then
          #   echo "status=failed" >> $GITHUB_OUTPUT
          #   exit 1
          # else
          #   echo "status=passed" >> $GITHUB_OUTPUT
          # fi

  run-ui-tests:
    needs: random-check
    if: needs.random-check.outputs.status == 'passed' || needs.random-check.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.test.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make UI test script executable
        run: chmod +x ./uitest.sh
      
      - name: Run UI Tests
        id: test
        run: |
          # Run tests and capture output
          TEST_OUTPUT=$(./uitest.sh)
          # Save test results file
          cat ui_test_results.txt > ui_test_details.txt
          # Set output for next job
          echo "results=$TEST_OUTPUT" >> $GITHUB_OUTPUT
        continue-on-error: true

  run-unit-tests:
    needs: random-check
    if: needs.random-check.outputs.status == 'passed' || needs.random-check.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.test.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make unit test script executable
        run: chmod +x ./unittest.sh
      
      - name: Run Unit Tests
        id: test
        run: |
          # Run tests and capture output
          TEST_OUTPUT=$(./unittest.sh)
          # Save test results file
          cat unit_test_results.txt > unit_test_details.txt
          # Set output for next job
          echo "results=$TEST_OUTPUT" >> $GITHUB_OUTPUT
        continue-on-error: true

  generate-ui-report:
    needs: run-ui-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Make report script executable
        run: chmod +x ./report-gen.sh

      - name: Generate UI Test Report
        id: save-ui
        run: |
          mkdir -p reports
          # Parse the test results
          IFS=';' read -r -a UI_RESULTS <<< "${{ needs.run-ui-tests.outputs.test_results }}"
          for result in "${UI_RESULTS[@]}"; do
            IFS='=' read -r key value <<< "$result"
            case "$key" in
              "TOTAL") TOTAL="$value" ;;
              "PASS") PASS="$value" ;;
              "FAIL") FAIL="$value" ;;
              "RATE") RATE="$value" ;;
            esac
          done
          # Generate UI test report
          ./report-gen.sh "$TOTAL" "$PASS" "$FAIL" "$RATE" "ui"
          # Rename the report file to match expected name
          mv reports/report-ui.html reports/report-ui-tests.html

      - name: Upload UI Report
        uses: actions/upload-artifact@v3
        with:
          name: ui-report
          path: reports/report-ui-tests.html

  generate-unit-report:
    needs: run-unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Make report script executable
        run: chmod +x ./report-gen.sh

      - name: Generate Unit Test Report
        id: save-unit
        run: |
          mkdir -p reports
          # Parse the test results
          IFS=';' read -r -a UNIT_RESULTS <<< "${{ needs.run-unit-tests.outputs.test_results }}"
          for result in "${UNIT_RESULTS[@]}"; do
            IFS='=' read -r key value <<< "$result"
            case "$key" in
              "TOTAL") TOTAL="$value" ;;
              "PASS") PASS="$value" ;;
              "FAIL") FAIL="$value" ;;
              "RATE") RATE="$value" ;;
            esac
          done
          # Generate unit test report
          ./report-gen.sh "$TOTAL" "$PASS" "$FAIL" "$RATE" "unit"
          # Rename the report file to match expected name
          mv reports/report-unit.html reports/report-unit-tests.html

      - name: Upload Unit Report
        uses: actions/upload-artifact@v3
        with:
          name: unit-report
          path: reports/report-unit-tests.html

  create-index:
    needs: [generate-ui-report, generate-unit-report]
    runs-on: ubuntu-latest
    steps:
      - name: Create reports directory
        run: mkdir -p reports

      - name: Download UI Report
        uses: actions/download-artifact@v3
        with:
          name: ui-report
          path: reports

      - name: Download Unit Report
        uses: actions/download-artifact@v3
        with:
          name: unit-report
          path: reports

      - name: Create index page
        run: |
          cat << EOF > reports/index.html
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .link-box {
                      padding: 20px;
                      margin: 10px 0;
                      background: #f4f4f4;
                      border-radius: 5px;
                  }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Test Reports</h1>
                  <div class="link-box">
                      <h2><a href="./report-ui-tests.html">UI Test Report</a></h2>
                  </div>
                  <div class="link-box">
                      <h2><a href="./report-unit-tests.html">Unit Test Report</a></h2>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Verify Files
        run: |
          echo "Checking reports directory contents:"
          ls -la reports/
          
          # Check if report files exist
          for file in reports/report-ui-tests.html reports/report-unit-tests.html reports/index.html; do
            if [ ! -f "$file" ]; then
              echo "Error: $file is missing!"
              exit 1
            else
              echo " Found $file"
            fi
          done

      - name: Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: reports

  deploy-to-pages:
    needs: create-index
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download Combined Reports
        uses: actions/download-artifact@v3
        with:
          name: test-reports
          path: ./reports

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './reports'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Echo Report URLs
        id: urls
        run: |
          {
            echo "MAIN_URL=${{ steps.deployment.outputs.page_url }}"
            echo "UI_URL=${{ steps.deployment.outputs.page_url }}report-ui-tests.html"
            echo "UNIT_URL=${{ steps.deployment.outputs.page_url }}report-unit-tests.html"
          } >> $GITHUB_OUTPUT

  notify-telegram:
    needs: [deploy-to-pages]
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          UI_RESULTS: ${{ needs.run-ui-tests.outputs.test_results }}
          UNIT_RESULTS: ${{ needs.run-unit-tests.outputs.test_results }}
          DEPLOY_URL: ${{ needs.deploy-to-pages.outputs.url }}
        run: |
          # Parse UI test results
          IFS=';' read -r -a UI_ARRAY <<< "$UI_RESULTS"
          UI_SUMMARY=""
          for result in "${UI_ARRAY[@]}"; do
            UI_SUMMARY+="$result\n"
          done

          # Parse Unit test results
          IFS=';' read -r -a UNIT_ARRAY <<< "$UNIT_RESULTS"
          UNIT_SUMMARY=""
          for result in "${UNIT_ARRAY[@]}"; do
            UNIT_SUMMARY+="$result\n"
          done

          # Create message
          MESSAGE="🔔 *Test Reports Ready*
          
          🌐 *Report URLs:*
          Main Page: https://peerasak-u.github.io/jobs-demo/
          UI Tests: https://peerasak-u.github.io/jobs-demo/report-ui-tests.html
          Unit Tests: https://peerasak-u.github.io/jobs-demo/report-unit-tests.html
          
          Repository: \`${{ github.repository }}\`
          Branch: \`${{ github.ref_name }}\`"

          # Send to Telegram
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

  notify-random-failure:
    needs: deploy-to-pages
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="❌ *Workflow Failed!*
          
          A job in the workflow has failed and further execution will be stopped.
          
          Repository: \`${{ github.repository }}\`
          Branch: \`${{ github.ref_name }}\`
          Commit: \`${{ github.sha }}\`"

          # Send to Telegram
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"
